#!/usr/bin/env bash
set -x

###############################################################################
# Define the message type printing formats
###############################################################################

_HDR_FMT="%s %s "
_MSG_FMT="${_HDR_FMT} : %s\n"

# Print INFO messages with the function name and optional string message
# arg1 = Message string
# arg2 = Indent size
function info_msg() {
  local indentstr=""
  local icnt=${2}
  local c
 
  # If an indent size arg is provided, generate the string
  if [[ -n "${icnt}" ]]; then 
    # Verify it's a positive number
    local re='^[0-9]+$'
    if [[ "${icnt}" =~ $re ]] ; then
      for (( c=1; c<=${icnt}; c++ )); do
        indentstr+=" "
      done
    fi
  fi

  echo "${indentstr}${STR_INFO} ${FUNCNAME[1]} : ${1}"
}

# Print WARNING messages with the function name and optional string message
function warn_msg() {
  local indentstr=""
  local icnt=${2}
  local c

  # If an indent size arg is provided, generate the string
  if [[ -n "${icnt}" ]]; then
    # Verify it's a positive number
    local re='^[0-9]+$'
    if [[ "${icnt}" =~ $re ]] ; then
      for (( c=1; c<=${icnt}; c++ )); do
        indentstr+=" "
      done
    fi
  fi

  echo "${STR_WARN} ${FUNCNAME[1]} : ${1}"
}

# Print CRITICAL messages with the function name and optional string message
function crit_msg() {
  local indentstr=""
  local icnt=${2}
  local c

  # If an indent size arg is provided, generate the string
  if [[ -n "${icnt}" ]]; then
    # Verify it's a positive number
    local re='^[0-9]+$'
    if [[ "${icnt}" =~ $re ]] ; then
      for (( c=1; c<=${icnt}; c++ )); do
        indentstr+=" "
      done
    fi
  fi

  echo "${STR_CRIT} ${FUNCNAME[1]} : ${1}"
}

###############################################################################
# Progress Bar
###############################################################################

function init_progressbar() {
        #START_DATE=$(date +%s)
        TOTAL="$1"
        COUNT=0
}

function inc_progressbar() {
        COUNT=$((COUNT+1))
        PERCENT=$((100 * COUNT / TOTAL))
        BARLEN=$((PERCENT / 5))
        #TIME=$(( $(date +%s) - START_DATE ))
        REMAINING=$(( ((100*TIME/COUNT) * (TOTAL-COUNT))/100 ))

        printf "\r%d%% (%d of %d)  [" "$PERCENT" "$COUNT" "$TOTAL"
        for i in {1..20}
        do
                if [ "$i" -gt "$BARLEN" ]
                then printf "%s" " "
                else printf "%s" "="
                fi
        done

        #printf "] %ds remaining     " "$REMAINING"
        printf "] "
}

set +x
