#!/usr/bin/env bash

# Prevent repeated sourcing
if [ -n "${__MODULE_CHECK_DIMM_HEALTH__}" ]; then
  return
fi
__MODULE_CHECK_DIMM_HEALTH__="Loaded"

# Validate all DIMMs are "Healthy"
function optane_check_dimm_health_status() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with INFO message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    echo "${STR_INFO} ${FUNCNAME[0]} : Could not process '${FNAME}'. File not found"
    REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1)) # Increment the INFO count
    return
  fi

  # Create Associative Arrays
  declare -A DIMM_HEALTHSTATE_COUNT    # Key is the HealthState; Value is a list of DIMMs with this State

  # Get the DimmID and HealthState fields from the input file
  while IFS='|' read -r DimmID Capacity LockState HealthState FWVersion
  do
    DimmID="$(echo ${DimmID})"          # Remove leading and trailing whitespaces
    HealthState="$(echo ${HealthState})"      # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DIMM Capacity: ${DimmID}=${Capacity}"
    fi
    # Report non-healthy dimms
    if [ "${HealthState}" != "Healthy" ]; then
      ERR_STATE=true
    fi
    # Add the DIMM to the HealthState array
    DIMM_HEALTHSTATE_COUNT[${HealthState}]+="${DimmID},"
  done <<<  "$(tail -n +3 ${FNAME})" # Skip the header lines (1&2), and start reading from line 3

  # If the HealthState counter array has more than one State, or we previously found non-Healthy modules, print the array
  if [[ ${#DIMM_HEALTHSTATE_COUNT[@]} -gt 1 ]] || [[ "${ERR_STATE}" = true ]]; then
    info_msg "Multiple (${#DIMM_HEALTHSTATE_COUNT[@]}) PMem Health states identified!" 2
    for d in "${!DIMM_HEALTHSTATE_COUNT[@]}" ; do # Display the full list of DimmIDs and Capacities found
      DIMM_LIST=${DIMM_HEALTHSTATE_COUNT[${d}]::-1} # Strip the last character ',' from the string
      info_msg "${d} = ${DIMM_LIST}" 2
    done
  fi

  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    echo "${STR_FAIL} ${FUNCNAME[0]} : One or more PMem modules reported a non-Healty status. See previous errors."
    REPORT_COUNT_FAILED=$((REPORT_COUNT_FAILED+1))
  else
    echo "${STR_PASSED} ${FUNCNAME[0]} : All PMem Modules are Healthy"
    REPORT_COUNT_PASSED=$((REPORT_COUNT_PASSED+1))
  fi
}

# Call the main function
optane_check_dimm_health_status "${OUTPUT_PATH}/ipmctl_show_-dimm"
