#!/usr/bin/env bash
#set -x
# Prevent repeated sourcing
if [ -n "${_MODULE_CHECK_DIMM_VIRAL_STATE_}" ]; then
  return
fi
_MODULE_CHECK_DIMM_VIRAL_STATE_="Loaded"
# Validate ViralStae == 0
function optane_check_dimm_viral_state() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting
  # Exit the function with INFO message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    info_msg " Could not process '${FNAME}'. File not found"
    REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1)) # Increment the INFO count
    return
  fi
  while IFS='|' read -r DimmID Property Value 
  do
    DimmID="$(echo ${DimmID})"         # Remove leading and trailing whitespaces
    Property="$(echo ${Property})" # Remove leading and trailing whitespaces
    PropertyValue="$(echo ${Value})"   # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DimmID ${DimmID}: ${Property}=${Value}"
    fi
    # If viral policy != 0 report error
    if [[ "${PropertyValue}" -ne "0" ]]; then 
        ERR_STATE=true
    fi             
  done <<<  "$(${GREP} ViralState ${FNAME})" || return 0
  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    echo "${STR_FAIL} ${FUNCNAME[0]} : One or more PMem modules are Viral" 
    REPORT_COUNT_FAILED=$((REPORT_COUNT_FAILED+1))
   else
    echo "${STR_PASSED} ${FUNCNAME[0]} : All PMem modules are not Viral" 
    REPORT_COUNT_PASSED=$((REPORT_COUNT_PASSED+1))
  fi
}
# Call the main function
optane_check_dimm_viral_state "${OUTPUT_PATH}/ipmctl_show_-a_-dimm.psv"
