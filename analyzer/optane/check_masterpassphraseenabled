#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing
if [ -n "${__MODULE_CHECK_MASTERPASSPHRASEENABLED_}" ]; then
  return
fi
__MODULE_CHECK_MASTERPASSPHRASEENABLED_="Loaded"

# Check if a Master Passphrase has been defined 
# Both Enabled and Disabled are valid. Just need to report the state to the user.
function optane_check_masterpassphraseenabled() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting
  local MasterPassphraseEnabled=false # Used for reporting

  # Exit the function with INFO message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    info_msg " Could not process '${FNAME}'. File not found"
    REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1)) # Increment the INFO count
    return
  fi

  # Create Associative Array
  declare -A DIMM_HEALTH  # Key is the DIMM Property value; Value is a list of DIMMs with this Property value

  # Get the DimmID, Property, and Value fields from the input file
  while IFS='|' read -r DimmID Property Value 
  do
    DimmID="$(echo ${DimmID})"         # Remove leading and trailing whitespaces
    PropertyType="$(echo ${Property})" # Remove leading and trailing whitespaces
    PropertyValue="$(echo ${Value})"   # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DimmID ${DimmID}: ${Property}=${Value}"
    fi
    # Report if the platform has MasterPassphraseEnabled Enabled(1) or Disabled(0)
    if [[ "${PropertyValue}" -eq 1 ]]; then
      MasterPassphraseEnabled=true
    fi
    # Add the DIMM to the associative array
    DIMM_HEALTH[${PropertyValue}]+="${DimmID},"
  done <<<  "$(${GREP} MasterPassphraseEnabled ${FNAME})" || return 0
  # If the property is not in the input file, exit the function

  # Report if different states were found on different PMem modules (Highly unusual)
  if [ "${#DIMM_HEALTH[@]}" -gt 1 ]; then
    ERR_STATE=true
    info_msg "Multiple (${#DIMM_HEALTH[@]}) ${PropertyType} DIMM states found!"
    for d in "${!DIMM_HEALTH[@]}" ; do # Display the full list of DIMMs found
      DIMM_LIST=${DIMM_HEALTH[${d}]::-1} # Strip the last character ',' from the string
      info_msg "${d} = ${DIMM_LIST}"
    done
  fi

  # Return the state to the user
  if [ "${ERR_STATE}" == "true" ] ; then 
    echo "${STR_FAIL} ${FUNCNAME[0]} : One or more PMem modules has different MasterPassphraseEnabled states!"
    REPORT_COUNT_FAILED=$((REPORT_COUNT_FAILED+1))
  else 
    if [ "${MasterPassphraseEnabled}" == "true" ] ; then
      echo "${STR_INFO} ${FUNCNAME[0]} : Master Passphrase is Enabled"
      REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1))
    else
      echo "${STR_INFO} ${FUNCNAME[0]} : Master Passphrase is Disabled"
      REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1))
    fi
  fi 
}

# Call the main function
optane_check_masterpassphraseenabled "${OUTPUT_PATH}/ipmctl_show_-a_-dimm.psv"
