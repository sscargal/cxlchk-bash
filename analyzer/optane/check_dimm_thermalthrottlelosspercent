#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing
if [ -n "${__MODULE_CHECK_DIMM_THERMALTHROTTLELOSSPERCENT_}" ]; then
  return
fi
__MODULE_CHECK_DIMM_THERMALTHROTTLELOSSPERCENT_="Loaded"

# Check for PMem Modules that have ThermalThrottleLossPercent != "N/A" or > 0
function optane_check_dimm_thermalthrottlelosspercent() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with a SKIPPED message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
    return
  fi

  # Create Associative Array
  declare -A DIMM_HEALTH  # Key is the DIMM Property value; Value is a list of DIMMs with this Property value

  # Get the DimmID, Property, and Value fields from the input file
  while IFS='|' read -r DimmID Property Value 
  do
    DimmID="$(echo ${DimmID})"         # Remove leading and trailing whitespaces
    PropertyType="$(echo ${Property})" # Remove leading and trailing whitespaces
    PropertyValue="$(echo ${Value})"   # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DimmID ${DimmID}: ${Property}=${Value}"
    fi
    # Report PMem Modules with ThermalThrottleLossPercent != "N/A" or > 0
    case ${PropertyValue} in
      0|"N/A") # PropertyValue is a string - The product doesn't support ThermalThrottleLossPercent 
	# Nothing to do
        ;;
      ^[1-9]+$) # PropertyValue is a numer > 0
        ERR_STATE=true 
        ;;
      *) # Fall through to error
        ERR_STATE=true
        ;;
    esac

    # Add the DIMM to the associative array 
    DIMM_HEALTH[${PropertyValue}]+="${DimmID},"
  done <<<  "$(${GREP} ThermalThrottleLossPercent ${FNAME})" || return 0

  # Report non-Healthy DIMMs
  if [ "${ERR_STATE}" = true ]; then
    info_msg "Multiple (${#DIMM_HEALTH[@]}) ${PropertyType} DIMM states found!" 2
    for d in "${!DIMM_HEALTH[@]}" ; do # Display the full list of DIMMs found
      DIMM_LIST=${DIMM_HEALTH[${d}]::-1} # Strip the last character ',' from the string
      info_msg "${d} = ${DIMM_LIST}" 2
    done
  fi

  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    rule_result FAILED "One or more PMem modules reported ThermalThrottleLossPercent > 0%"
  else
    rule_result PASSED "All PMem modules have zero ThermalThrottleLossPercent events"
  fi
}

# Call the main function
optane_check_dimm_thermalthrottlelosspercent "${OUTPUT_PATH}/ipmctl_show_-a_-dimm.psv"
