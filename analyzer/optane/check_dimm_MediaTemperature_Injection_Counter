#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing
if [ -n "${_MODULE_CHECK_DIMM_MEDIA_TEMP_INJECTION_COUNTER_}" ]; then
  return
fi
_MODULE_CHECK_DIMM_MEDIA_TEMP_INJECTION_COUNTER_="Loaded"

# Validate Temp Injection Counter != 0
function optane_check_dimm_media_temperature_injections_count() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with a SKIPPED message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
    return
  fi

  # Create Associative Array
  declare -A MEDIA_TEMP_INJ_COUNTER  # Key is the DIMM Property value; Value is a list of DIMMs with this Property value

  # Get the DimmID, Property, and Value fields from the input file
  while IFS='|' read -r DimmID Property Value 
  do
    DimmID="$(echo ${DimmID})"         # Remove leading and trailing whitespaces
    Property="$(echo ${Property})" # Remove leading and trailing whitespaces
    PropertyValue="$(echo ${Value})"   # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DimmID ${DimmID}: ${Property}=${Value}"
    fi
    # Report PMem Modules that have MediaTemperatureInjectionsCounter != 0 
    if [[ "${PropertyValue}" -ne 0 ]]; then
      ERR_STATE=true
    fi
    # Add the DIMM to the associative array 
   MEDIA_TEMP_INJ_COUNTER[${PropertyValue}]+="${DimmID},"
  done <<<  "$(${GREP} MediaTemperatureInjectionsCounter ${FNAME})" || return 0

  # Report DIMMS with MediaTemperatureCounter value != 0
  if [ "${ERR_STATE}" = true ]; then
    info_msg "Multiple (${#MEDIA_TEMP_INJ_COUNTER[@]}) ${Property} DIMM states found!" 2
    for d in "${!MEDIA_TEMP_INJ_COUNTER[@]}" ; do # Display the full list of DIMMs found
      MEDIA_TEMP_INJ_COUNTER=${MEDIA_TEMP_INJ_COUNTER[${d}]::-1} # Strip the last character ',' from the string
      info_msg "${d} = ${MEDIA_TEMP_INJ_COUNTER}" 2
    done
  fi

  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    rule_result FAILED "One or more PMem modules have greater than 0  Media Temperature Injection Counter"
  else
    rule_result PASSED "All PMem modules have 0 Media Temperature Injection Counter"
  fi
}

# Call the main function
optane_check_dimm_media_temperature_injections_count "${OUTPUT_PATH}/ipmctl_show_-a_-dimm.psv"
