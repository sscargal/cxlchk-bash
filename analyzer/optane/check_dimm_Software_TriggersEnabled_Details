#!/usr/bin/env bash
#set -x
# Prevent repeated sourcing
#STE_STED stands for Software Triggers Enable/Detials 
if [ -n "${_MODULE_CHECK_DIMM_STE_STED_}" ]; then
  return
fi
_MODULE_CHECK_DIMM_STE_STED_="Loaded"
# Validate SoftwareTriggersEnabled == 0 (Disabled) 
# If enabled create comma separated list of software triggers 
function optane_check_dimm_software_triggers_enabled_details() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting
  # Exit the function with INFO message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    info_msg " Could not process '${FNAME}'. File not found"
    REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1)) # Increment the INFO count
    return
  fi
  # Create Associative Array
  declare -A STE_STED  # Key is the DIMM Property value; Value is a list of DIMMs with this Property value
  # Get the DimmID, Property, and Value fields from the input file
  while IFS='|' read -r DimmID Property Value 
  do
    DimmID="$(echo ${DimmID})"         # Remove leading and trailing whitespaces
    Property="$(echo ${Property})" # Remove leading and trailing whitespaces
    PropertyValue="$(echo ${Value})"   # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DimmID ${DimmID}: ${Property}=${Value}"
    fi
    # Select SoftwareTriggersEnabled data value first 
    if [[ "${Property}" == "SoftwareTriggersEnabled" ]]; then  
     # Check the value
     # If it != 0 report Err and report the detials    
      if [[ "${PropertyValue}" -ne "0" ]]; then   # If value is != 0 then mark error and report next value
        ERR_STATE=true
      fi
     # Get property value for SoftwareTriggersEnabledDetails
    elif [[ "${Property}" == "SoftwareTriggersEnabledDetails" ]]; then
	#ERR_STATE=true
        STE_STED[${PropertyValue}]+="${DimmID},"             
    fi 
  done <<<  "$(${GREP} -E 'SoftwareTriggersEnabled|SoftwareTriggersEnabledDetails' ${FNAME})" || return 0
  # Report details of DIMMS that have SoftwareTriggersEnabled   
  if [ "${ERR_STATE}" = true ]; then
    info_msg "${#STE_STED[@]} software triggers enabled details found!" 2
    for d in "${!STE_STED[@]}" ; do # Display the full list of DIMMs found
      STE_STED=${STE_STED[${d}]::-1} # Strip the last character ',' from the string
      info_msg "${d} = ${STE_STED}" 2
    done
  fi
  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    echo "${STR_INFO} ${FUNCNAME[0]} : One or more PMem modules have software trigger enabled " 
    REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1))
   else
     echo "${STR_PASSED} ${FUNCNAME[0]} : All PMem modules have software trigger disabled" 
     REPORT_COUNT_PASSED=$((REPORT_COUNT_PASSED+1))
  fi
}
# Call the main function
optane_check_dimm_software_triggers_enabled_details "${OUTPUT_PATH}/ipmctl_show_-a_-dimm.psv"
