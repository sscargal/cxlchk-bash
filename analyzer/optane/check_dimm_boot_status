#!/usr/bin/env bash
#set -x
# Prevent repeated sourcing
if [ -n "${_MODULE_CHECK_DIMM_BOOT_STATUS_}" ]; then
  return
fi
_MODULE_CHECK_DIMM_BOOT_STATUS_="Loaded"
# Validate BootStatus == Success otherwise report register value
function optane_check_dimm_boot_status() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting
  
  # Exit the function with a SKIPPED message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
    return
  fi

  declare -A BOOT_REGISTER
  # Get the DimmID, Property, and Value fields from the input file
  while IFS='|' read -r DimmID Property Value 
  do
    DimmID="$(echo ${DimmID})"         # Remove leading and trailing whitespaces
    Property="$(echo ${Property})" # Remove leading and trailing whitespaces
    PropertyValue="$(echo ${Value})"   # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DimmID ${DimmID}: ${Property}=${Value}"
    fi
    # Select BootStatus 
    if [[ "${Property}" == "BootStatus" ]]; then  
     # check if success 
      if [[ "${PropertyValue}" != "Success" ]]; then
        ERR_STATE=true 
      fi
    elif [[ "${Property}" == "BootStatusRegister" ]]; then
       if [ "${ERR_STATE}" = true ] ; then
         BOOT_REGISTER[${PropertyValue}]+="${DimmID},"
       fi  
    fi
  done <<<  "$(${GREP} -E 'BootStatus|BootStatusRegister' ${FNAME})" || return 0 
  
  # Report details of DIMMS that have BootStatus != Success
  if [ "${BOOT_REGISTER}" = true ]; then
    info_msg "${#BOOT_REGISTER[@]} Dimms with unsuccessful BootStatus found!" 2
    for d in "${!BOOT_REGISTER[@]}" ; do # Display the full list of DIMMs found
      BOOT_REGISTER=${BOOT_REGISTER[${d}]::-1} # Strip the last character ',' from the string
      info_msg "${d} = ${BOOT_REGISTER}" 2
    done
  fi
  
  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    rule_result FAILED "One or more PMem modules have unsucessful BootStatus "
  else
    rule_result PASSED "All PMem modules have successful BootStatus"    
  fi
}

# Call the main function
optane_check_dimm_boot_status "${OUTPUT_PATH}/ipmctl_show_-a_-dimm.psv"
