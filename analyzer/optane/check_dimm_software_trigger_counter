#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing
if [ -n "${_MODULE_CHECK_DIMM_SOFTWARE_TRIGGER_COUNTER_}" ]; then
  return
fi
_MODULE_CHECK_SOFTWARE_TRIGGER_COUNTER_="Loaded"

# Validate DIMM Software Trigger is not equal to 0
function optane_check_dimm_software_trigger_counter() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with INFO message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
    return
  fi


  # Get the DimmID, Property, and Value fields from the input file
  while IFS='|' read -r DimmID Property Value 
  do
    DimmID="$(echo ${DimmID})"         # Remove leading and trailing whitespaces
    Property="$(echo ${Property})" # Remove leading and trailing whitespaces
    PropertyValue="$(echo ${Value})"   # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DimmID ${DimmID}: ${Property}=${Value}"
    fi
    # Report PMem Modules that have Software Trigger Counter greater than 0
    if [[ "${PropertyValue}" -ne 0 ]]; then
      ERR_STATE=true
    fi
  done <<<  "$(${GREP} SoftwareTriggerCounter ${FNAME})" || return 0 

  # check for the final pass or fail
  if [ "${ERR_STATE}" = true ] ; then
    rule_result FAILED "One or more PMem modules reported Software Trigger Counter > 0"
  else
    rule_result PASSED "All PMem modules have Software Trigger Counter == 0"
  fi
}
# Call the main function
optane_check_dimm_software_trigger_counter "${OUTPUT_PATH}/ipmctl_show_-a_-dimm.psv"
