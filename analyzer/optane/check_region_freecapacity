#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing
if [ -n "${__MODULE_CHECK_REGION_FREECAPACITY__}" ]; then
  return
fi
__MODULE_CHECK_REGION_FREECAPACITY__="Loaded"

# Validate all regions have the same free capacity or the free capacity is not zero
function optane_check_region_freecapacity() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with a SKIPPED message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
  fi

  # Create Associative Arrays
  declare -A REGION_FREECAPACITY    # Key is the FreeCapacity; Value is a list of Regions with this FreeCapacity

  # Get the SocketID and FreeCapacity fields from the input file
  while IFS='|' read -r SocketID ISetID PersistentMemoryType Capacity FreeCapacity HealthState
  do
    SocketID="$(echo ${SocketID})"              # Remove leading and trailing whitespaces
    FreeCapacity="$(echo ${FreeCapacity})"      # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "Socket Capacity: ${SocketID}=${FreeCapacity}"
    fi
    # Add the Region FreeCapacity to the array 
    REGION_FREECAPACITY[${FreeCapacity}]+="${SocketID},"
    # Report free space (>= 0.0000 GiB)
    #if [[ "${FreeCapacity}" =~ ^0 ]]; then 
    #  info_msg "Socket ${SocketID} has ${FreeCapacity} available"
    #fi
  done <<<  "$(tail -n +3 ${FNAME})" # Skip the header lines (1&2), and start reading from line 3

  # Report Regions with different free capacities or non-zero free capacities
  if [[ ${#REGION_FREECAPACITY[@]} -gt 1 ]]; then
    info_msg "Multiple (${#REGION_FREECAPACITY[@]}) Region Free Capacities found!" 2
    for r in "${!REGION_FREECAPACITY[@]}" ; do # Display the full list of Regions found
      REGION_LIST=${REGION_FREECAPACITY[${r}]::-1} # Strip the last character ',' from the string
      info_msg "Socket ${REGION_LIST} has ${r} Free" 2
    done
    ERR_STATE=true
  fi

  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    rule_result FAILED "One or more regions have different FreeCapacity. See previous errors." 
  else
    rule_result PASSED "All Regions have the same FreeCapacity"
  fi
}

# Call the main function
optane_check_region_freecapacity "${OUTPUT_PATH}/ipmctl_show_-region"
