#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing 
#if [ -n "${__MODULE_CHECK_DIMM_FIRMWARE_VERSION__}" ]; then
#  return
#fi
#__MODULE_CHECK_DIMM_FIRMWARE_VERSION__="Loaded"

# Validate all PMem modules have the same firmware version
function optane_check_dimm_firmware_version() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with INFO message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then 
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
    return
  fi

  # Create an Associative Array
  declare -A DIMM_FW		# Key is the DimmID; Value is the Firmware Version
  declare -A DIMM_FW_COUNT 	# Key is the Firmware Version; Value is a list of DimmIDs with that Firmware Version 

  # Get the DimmID and FMVersion fields from the input file
  while IFS='|' read -r DimmID Capacity LockState HealthState FWVersion
  do
    DimmID="$(echo ${DimmID})"           # Remove leading and trailing whitespaces
    FWVersion="$(echo ${FWVersion})"      # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DIMM Firmware: ${DimmID}=${FWVersion}"
    fi
    # Store the DimmID=FMVersion 
    DIMM_FW[${DimmID}]=${FWVersion}
    # Add the DIMM to the Capacity array
    DIMM_FW_COUNT[${FWVersion}]+="${DimmID},"
  done <<<  "$(tail -n +3 ${FNAME})" # Skip the header lines (1&2), and start reading from line 3

  # If the firmware counter array has more than one firmware version, we have found modules with different firmware 
  if [[ ${#DIMM_FW_COUNT[@]} -gt 1 ]] ; then
    info_msg "Multiple (${#DIMM_FW_COUNT[@]}) firmware versions found! All PMem modules should have the same firmware version." 2
    for d in "${!DIMM_FW_COUNT[@]}" ; do # Display the full list of DimmIDs and Capacities found
      DIMM_LIST=${DIMM_FW_COUNT[${d}]::-1} # Strip the last character ',' from the string
      info_msg "${d} = ${DIMM_LIST}" 2
      ERR_STATE=true
    done
  fi

  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    rule_result FAILED "One or more PMem modules reported a different firmware version to the others. See previous errors."
  else
    rule_result PASSED "All PMem Modules have the same firmware."
  fi

  # Delete the associative arrays
  unset DIMM_FW
  unset DIMM_FW_COUNT
}

# Call the main function 
optane_check_dimm_firmware_version "${OUTPUT_PATH}/ipmctl_show_-dimm"
