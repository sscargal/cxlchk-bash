#!/usr/bin/env bash
#set -x
# Prevent repeated sourcing
if [ -n "${_MODULE_CHECK_DIMM_OVERWRITE_STATUS_}" ]; then
  return
fi
_MODULE_CHECK_DIMM_OVERWRITE_STATUS_="Loaded"

# Validate overwrite status has defined value Unknown, Not Started, and Completed = INFO msg + PASS
function optane_check_dimm_overwrite_status() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting
  
  # Exit the function with a SKIPPED message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
    return
  fi

  declare -A OVERWRITE_STATUS
  # Get the DimmID, Property, and Value fields from the input file
  while IFS='|' read -r DimmID Property Value 
  do
    DimmID="$(echo ${DimmID})"         # Remove leading and trailing whitespaces
    Property="$(echo ${Property})"     # Remove leading and trailing whitespaces
    PropertyValue="$(echo ${Value})"   # Remove leading and trailing whitespaces
    if [ ${OPT_VERBOSITY} -ge 3 ]; then
      debug_msg "DimmID ${DimmID}: ${Property}=${Value}"
    fi
    # Select overwrite status 
    if [[ "${Property}" == "OverwriteStatus" ]]; then  
      if [[ "${PropertyValue}" == "Not Started" ]] || [[ "${PropertyValue}" == "In progress" ]]; then
	ERR_STATE=true
        OVERWRITE_STATUS[${PropertyValue}]+="${DimmID},"
      elif [[ "${PropertyValue}" == "Completed" ]] || [[ "${PropertyValue}" == "Unknown" ]]; then
        OVERWRITE_STATUS[${PropertyValue}]+="${DimmID},"
      fi 
    fi
  done <<<  "$(${GREP} OverwriteStatus ${FNAME})" || return 0 
  
  # Report details of the Overwrite status for all modules
  if [ "${#OVERWRITE_STATUS}" -ge 0 ]; then
    info_msg "${#OVERWRITE_STATUS[@]} Overwrite Status found:" 2
    for d in "${!OVERWRITE_STATUS[@]}" ; do # Display the full list of DIMMs found
      OVERWRITE_STATUS=${OVERWRITE_STATUS[${d}]::-1} # Strip the last character ',' from the string
      info_msg "${d} = ${OVERWRITE_STATUS}" 2
    done
  else # No entries were found in the array so return without doing anything
    return 0
  fi
  
  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    rule_result WARNING "One or more PMem modules have Overwrite Status != 'Completed' or 'Unknown'"
  else
    rule_result PASSED "All PMem modules have Overwrite Status == '${!OVERWRITE_STATUS[@]}'"
  fi
}

# Call the main function
optane_check_dimm_overwrite_status "${OUTPUT_PATH}/ipmctl_show_-a_-dimm.psv"
