#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing
if [ -n "${__MODULE_CHECK_DIMM_PERCENTAGE_REMAINING__}" ]; then
  return
fi
__MODULE_CHECK_DIMM_PERCENTAGE_REMAINING__="Loaded"

# check percentage remaining 
function optane_check_dimm_percentage_remaining() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with INFO message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
    return
  fi

  # Get the DimmID and Current Value fields from the input file
  while IFS='|' read -r DimmID Type CurrentValue
  do
    DimmID="$(echo ${DimmID})"
    CurrentValue=(${CurrentValue::-1})      # Remove leading and trailing whitespaces
 
    # Check percentremaining threshold

    if [[ ${CurrentValue} -lt 100 ]] && [[ ${CurrentValue} -ge 50 ]]
    then 
      REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1))
      info_msg "DimmID ${DimmID} has ${CurrentValue}% life remaining" 2
    elif [[ ${CurrentValue} -lt 50 ]] && [[ ${CurrentValue} -ge 25 ]]
    then 
      REPORT_COUNT_WARNINGS=$((REPORT_COUNT_WARNINGS+1))
      warn_msg "DimmID ${DimmID} has ${CurrentValue}% life remaining" 2
      ERR_STATE=true
    elif [[ ${CurrentValue} -lt 25 ]] && [[ ${CurrentValue} -ge 0 ]]
    then 
      REPORT_COUNT_CRITICAL=$((REPORT_COUNT_CRITICAL+1))
      crit_msg "DimmID ${DimmID} has ${CurrentValue}% life remaining" 2
      ERR_STATE=true
    fi	
  done <<<  "$(${GREP} PercentageRemaining ${FNAME})" || return 0

  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    rule_result FAILED "One or more PMem Modules have less than 100% life remaining."
  else
    rule_result PASSED "All PMem Modules have 100% life remaining"
  fi
}

# Call the main function
optane_check_dimm_percentage_remaining "${OUTPUT_PATH}/ipmctl_show_-sensor"

