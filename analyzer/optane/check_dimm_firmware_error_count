#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing
if [ -n "${_MODULE_CHECK_FW_ERROR_COUNT_}" ]; then
  return
fi
_MODULE_CHECK_FW_ERROR_COUNT_="Loaded"

# check Firmware Error Count
function optane_check_dimm_fw_error_count() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with a SKIPPED message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    rule_result SKIPPED "Could not process '${FNAME}'. File not found"
    return
  fi

  # Get the DimmID and Current Value(FWError Count) fields from the input file
  while IFS='|' read -r DimmID Type CurrentValue
  do
    DimmID="$(echo ${DimmID})"
    CurrentValue=(${CurrentValue})

    # Check the FWError Count
    if [[ ${CurrentValue} -lt 49 ]] && [[ ${CurrentValue} -ge 10 ]]
    then
      REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1))
      info_msg "DimmID ${DimmID} has ${CurrentValue} FwError Count" 2
    elif [[ ${CurrentValue} -lt 100 ]] && [[ ${CurrentValue} -ge 50 ]]
    then
      REPORT_COUNT_WARNINGS=$((REPORT_COUNT_WARNINGS+1))
      warn_msg "DimmID ${DimmID} has ${CurrentValue} FwError Count" 2
      ERR_STATE=true
    elif [[ ${CurrentValue} -ge 100 ]]
    then
      REPORT_COUNT_CRITICAL=$((REPORT_COUNT_CRITICAL+1))
      crit_msg "DimmID ${DimmID} has ${CurrentValue} FwError Count" 2
      ERR_STATE=true
    fi
  done <<<  "$(${GREP} FwErrorCount ${FNAME})" || return 0

  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    rule_result FAILED "One or more PMem Modules reported having  50 or more FWError Count."
  else
    rule_result PASSED "All PMem Modules have less than 10 FWError Counts"
  fi
}

# Call the main function
optane_check_dimm_fw_error_count "${OUTPUT_PATH}/ipmctl_show_-sensor"
